<?php
function heydesk_calendar_init() {
  drupal_add_js(drupal_get_path('module', 'heydesk_calendar') . '/script/heydesk-calendar.js');
  drupal_add_js(drupal_get_path('module', 'heydesk_calendar') . '/script/heydesk_calendar.ajax.js');
  //  drupal_add_js(drupal_get_path('module', 'heydesk_fields') . '/js/jcarousel-basic.js');
  drupal_add_library('system', 'drupal.ajax');
}

function heydesk_calendar_menu() {

  $items['user/%user/manage-listing/calendar/%/%'] = array(
    'title' => t('Calendar'),
    'description' => t('All messages of user.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('heydesk_calendar_list', 1, 4, 5),
    'access callback' => TRUE,
    'access arguments' => array('heydesk user'),
    'type' => MENU_CALLBACK,
  );
  $items['ajax/calendar/mount/%/%/%/%'] = array(
    'title' => 'Get content by AJAX',
    'page callback' => 'heydesk_calendar_ajax_callback',
    'page arguments' => array(3, 4, 5, 6),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );
  return $items;
}

function ajax_commands_calehdar_generate($wriper, $calendar) {
  return array(
    //    'command' => 'calehdar_generate',
    //    // 'operator' => $operator,
    //    'calendar' => $calendar,
    //    'wriper' => $wriper
    //    //   'object' => calendar_render($operator),
  );

}

function heydesk_calendar_ajax_callback($mount, $pid, $date, $direction) {
  $op_month = $mount;
  $op_month = ($direction == 'next') ? $op_month - 1 : $op_month + 1;

  $commands = array();
  // $hex = '#ff0000';
  if ($date == 'date_to') {

    $commands[] = heydesk_calendar_sum_rental_days_command($op_month, $direction);
  }
  $commands[] = ajax_command_replace('#cal-from .mini_calendar', heydesk_calendar_mini($pid, $mount, 'date_from'));
  $commands[] = ajax_command_replace('#cal-to .mini_calendar', heydesk_calendar_mini($pid, $mount, 'date_to'));

    $commands[] = _heydesk_calendar_active_days_command($direction, $date);

  return array('#type' => 'ajax', '#commands' => $commands);
  //  $commands[] = ajax_command_invoke('#field-' . $node->nid, 'focus');
  //  $result = array('#type' => 'ajax');
  //  $result['#commands'][] = calehdar_generate('#cal-from', $operator, calendar_render($operator));
  //  return $result;

}


//register
function heydesk_calendar_entity_info() {
  return array(
    'heydesk_calendar' => array(
      'label' => t('Calendar'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'heydesk_calendar',
      'entity keys' => array(
        'id' => 'id'
      ),
      //    'admin ui' => array(
      //      'path' => 'admin/config/heydesk/messenger'
      //    ),
      'access callback' => 'heydesk_calendar_access',
      'module' => 'heydesk_calendar',
    ),
  );
}

function heydesk_calendar_access($op, $entity, $account = NULL, $entity_type = 'heydesk_calendar') {
  return user_access('heydesk user');
}

function heydesk_calendar_load($id) {
  $result = entity_load('heydesk_calendar', array($id));
  return $result ? reset($result) : FALSE;
}

function _calendar_mount_number($num) {
  $mount = 1 + $num;
  $mount = $mount > 12 ? $mount - 12 : $mount;
  return date('F', mktime(0, 0, 0, $mount));

}

function heydesk_calendar_list($form, $form_state, $user, $pid, $counts_mount) {
  $_SESSION['heydesk_calendar_mount'] = date('n');


  $proposal = db_select('heydesk_calendar', 'hd')
    ->fields('hd', array('id'))
    ->condition('hd.pid', $pid)
    ->condition('hd.status', 1, '>=')
    ->condition('hd.date_from', mktime(0, 0, 0, $counts_mount, 1), '>')
    ->condition('hd.date_to', mktime(0, 0, 0, $counts_mount, 30), '<')//   ->condition('hd.pid', $pid)
    ->execute()
    ->fetchAll();
  $proposals = array();
  foreach ($proposal as $prop) {
    $proposals[] = heydesk_calendar_load($prop->id);
  };

  // $counts_mount = isset($form_state['storsge']['mount']) ? $form_state['storsge']['mount'] : date('m');
  $ytae = date('Y');
  $week = _calendar_array($counts_mount, $ytae);
  // dpm($proposals);

  $form['title'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manage Listing')
  );
  $form['title']['warning'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="red-atention"><div class="warnings"></div><h2>Update Workspace Rental Calendar!</h2>
  <span>Remember to set the workspace rental calendar when the workspace is NOT available for rental.</span></div>'
  );

  $form['calendar'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',

  );
  $form['calendar']['title'] = array(
    '#type' => 'markup',
    '#markup' => '<h2>' . t('Calendar') . '</h2>',
  );
  $form['calendar']['text_coord'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="description"><div class="destruction">' . t('Indicate when your WORKSPACE is NOT available for rental. Remember to update the calendar regularly.') . '</div><span class="right"><p class="red"><span></span>' . t('Unavailable') . '</p><p class="yelow"><span></span>' . t('Partially Available / Rented.') . '</p></span></div>',
  );
  $form['this_mount'] = array(
    '#type' => 'value',
    '#value' => $counts_mount
  );
  $form['calendar']['mounts'] = array(
    '#type' => 'fieldset',
  );
  //  $form['calendar']['mounts'][0] = array(
  //    '#type' => 'markup',
  //    '#markup' => l(date('F'), _mount_linck_calendar(0), array(
  //      'attributes' => array(
  //        'class' => array(
  //          'button-calendar',
  //          'active'
  //        )
  //      )
  //    )),
  //    // '#submit' => array('_calendar_mount_next'),
  //
  //  );

  $num = date('n') - 1;
  $max_nim = $num + 6;
  while ($num < $max_nim) {
    //    $name_mount = $num == 0 ? date('F') : _calendar_mount_number($num);
    $name_mount = _calendar_mount_number($num);
    $class_active = $num + 1 == arg(5) ? 'active' : '';
    $form['calendar']['mounts'][$num] = array(
      '#type' => 'markup',
      '#markup' => l($name_mount, _mount_linck_calendar($num), array(
        'attributes' => array(
          'class' => array(
            'button-calendar',
            'mount-num-' . $num,
            $class_active
          )
        )
      )),
    );
    $num++;

  }
  drupal_add_js(array('mounts_num' => $counts_mount), 'setting');

  $form['calendar']['table_start'] = array(
    '#type' => 'markup',
    '#markup' => '<table class="t_calendar" border="1"><tr><td class="fucking_heydesk"></td><td class="wrap_week">Mondays</td><td class="wrap_week">Tuesdays</td><td class="wrap_week">Wednesdays</td><td class="wrap_week">Thursdays</td><td class="wrap_week">Fridays</td><td class="wrap_week">Saturdays</td><td class="wrap_week">Sundays</td></tr>',
  );
  for ($i = 0; $i < count($week); $i++) {
    $form['calendar']['week-start-' . $i] = array(
      '#type' => 'markup',
      '#markup' => '<tr><td class="select-week">' . t('Week ') . date('W', mktime(0, 0, 0, date('m'), ($week[$i][0] != '') ? $week[$i][0] : 1, date('Y'))) . '</td>',
    );
    for ($j = 0; $j < 7; $j++) {
      if (!empty($week[$i][$j])) {
        $num_class = 'status-0';
        $this_proposal = NULL;


        foreach ($proposals as $prday) {
          if (date('j', $prday->date_from) == $week[$i][$j]) {
            $this_proposal = $prday;
            $num_class = 'status-' . $prday->status;
            $id_day_prop = $prday->id;
          }
        }
        //  dpm(date('j'));
        if (($week[$i][$j] < date('j')) && ($counts_mount == date('m'))) {
          if ($j == 5 || $j == 6) {

            $form['calendar'][$week[$i][$j]] = array(
              '#type' => 'markup',
              '#markup' => '<td class="weekend">' . $week[$i][$j] . '</td>',
            );
          }
          else {
            $form['calendar'][$week[$i][$j]] = array(
              '#type' => 'markup',
              '#markup' => '<td class="' . $num_class . '">' . $week[$i][$j] . '</td>',
            );
          }
        }
        else {
          if ($j == 5 || $j == 6) {
            $form['calendar'][$week[$i][$j]] = array(
              '#type' => 'fieldset',
              '#prefix' => '<td class="weekend poss ' . $num_class . '">',
              '#suffix' => '</td>',
            );


          }
          else {
            $form['calendar'][$week[$i][$j]] = array(
              '#type' => 'fieldset',
              '#prefix' => '<td class="poss ' . $num_class . '">',
              '#suffix' => '</td>',
            );
          }
          $form['calendar'][$week[$i][$j]]['id'] = array(
            '#type' => 'value',
            '#value' => isset($this_proposal) ? $id_day_prop : FALSE,
          );

          $form['calendar'][$week[$i][$j]]['day'] = array(
            '#title' => '<div class="table_dead">' . $week[$i][$j] . '<span class="spanch-bob"></span></div>',
            '#type' => 'textfield',
            '#size' => 2,
            '#default_value' => isset($this_proposal) ? $this_proposal->status : 0,

          );
          $form['calendar'][$week[$i][$j]]['time'] = array(
            '#type' => 'fieldset',
            '#attributes' => array(
              'class' => array('hidden', 'frame_time')
            ),
          );
          $form['calendar'][$week[$i][$j]]['time']['time_from'] = array(
            '#type' => 'select',
            '#options' => _heydesk_time_array(),
            '#attributes' => array(
              'class' => array('frame_div--inner left')
            ),
          );
          $form['calendar'][$week[$i][$j]]['time']['time_to'] = array(
            '#type' => 'select',
            '#options' => array_reverse(_heydesk_time_array()),
            '#prefix' => '-',
            '#attributes' => array(
              'class' => array('frame_div--inner right')
            ),
          );


        }
      }
      else {
        $form['calendar']['empty' . $j . $i] = array(
          '#type' => 'markup',
          '#markup' => '<td>&nbsp;</td>'
        );
      }
    }
    $form['calendar']['week-end-' . $i] = array(
      '#type' => 'markup',
      '#markup' => '</tr>',
    );
  }
  $form['calendar']['table_finish'] = array(
    '#type' => 'markup',
    '#markup' => '</table>',
  );
  $form['calendar']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#attributes' => array('class' => array('button', 'button-submit')),

  );
  //dpm($form_state);

  return $form;
}


function heydesk_calendar_list_submit($form, &$form_state) {
  global $user;
  // $mounts_in = $form_state['values']['calendar']['mounts'];
  unset($form_state['values']['calendar']['mounts']);
  unset($form_state['values']['calendar']['submit']);
  //  dpm($form_state['values']['calendar']);
  foreach ($form_state['values']['calendar'] as $key => $days) {
    if (isset($days['day']) || ($days['day'] != 0)) {
      $date_from = explode('_', $days['time']['time_from']);
      $date_to = explode('_', $days['time']['time_to']);
      if ($days['id']) {
        $heydesk_calendar = heydesk_calendar_load($days['id']);
        $heydesk_calendar->date_from = mktime($date_from[0], $date_from[1], 0, $form_state['values']['this_mount'], $key);
        $heydesk_calendar->date_to = mktime($date_to[0], $date_to[1], 0, $form_state['values']['this_mount'], $key);
        $heydesk_calendar->pid = arg(4);
        $heydesk_calendar->status = $days['day'];
        $heydesk_calendar = entity_save('heydesk_calendar', $heydesk_calendar);
      }
      else {


        $values = array(
          'date_from' => mktime($date_from[0], $date_from[1], 0, $form_state['values']['this_mount'], $key),
          'date_to' => mktime($date_to[0], $date_to[1], 0, $form_state['values']['this_mount'], $key),
          'pid' => arg(4),
          'status' => $days['day'],
        );
        $heydesk_calendar = entity_create('heydesk_calendar', $values);
        $heydesk_calendar = entity_save('heydesk_calendar', $heydesk_calendar);
        if ($heydesk_calendar) {
          //  drupal_set_message(t('Calendar Save'));
          $form_state['redirect'] = 'user/' . $user->uid . '/manage-listing/';
        }
      }
    }
  }

}

function heydesk_calendar_mini($pid, $mount_now = 0, $date_type = 'date_from') {

  //  $proposal = db_select('heydesk_calendar', 'hd')
  //    ->fields('hd', array('id'))
  //    ->condition('hd.pid', $pid)
  //    ->condition('hd.date_from', mktime(0, 0, 0, date('n'), 1), '>')//  ->condition('hd.date_to', mktime(0, 0, 0, date('n'), 30), '>')
  //    //   ->condition('hd.pid', $pid)
  //    ->execute()
  //    ->fetchAll();
  $mount = $mount_now == 0 ? date('n') : $mount_now;
  $this_mount = $mount == date('n') ? 1 : 0;
  $year = date('Y');

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'heydesk_calendar')//определим, какой тип сушности выводим
  ->propertyCondition('pid', $pid)//ограничим словарь
  ->propertyCondition('status', 0, '!=')//ограничим словарь
  ->propertyCondition('date_to', mktime(0, 0, 0, $mount, 1), '>=')
    ->propertyCondition('date_from', mktime(0, 0, 0, $mount, 28), '<=');
  //    ->fieldCondition('id', 'value', 'значение поля', '=');  //укажем значение поля
  $result = $query->execute();
  $active_day = array();

  if ($result) {
    $data_result = array();


    foreach ($result['heydesk_calendar'] as $key => $item) {

      $data_result[$key] = heydesk_calendar_load($item->id);

    }
    foreach ($data_result as $value) {
      $day = date('d', $value->date_to);
      $active_day[$day] = $value->status;
    }
  }
  //  dpm($active_day);
  //

  //  foreach ($proposal as $prop) {
  //    $proposals[$prop->id] = heydesk_calendar_load($prop->id);
  //  };
  //  var_dump($result);
  $green_day_col = array();
  $hidden_class = $this_mount == 1 ? 'hidden' : 'visible';

  $mount_date_f = date('n');
  $mount_date_y = date('Y');
  $mount_dates = $mount_now == 0 ? date('F Y', mktime(0, 0, 0, $mount_date_f, 1, $mount_date_y)) : date('F Y', mktime(0, 0, 0, $mount_now, 1, $mount_date_y));
  $prev = $mount - 1;
  $next = $mount + 1;
  $week = _calendar_array($mount, $year);
  $output = '<div id="mini_' . $date_type . '-' . $mount . '" class="mini_calendar" data-date-start="' . $mount . '">';
  $output .= '<div id="month-' . $mount . '" class="mounts">';
  $output .= theme('link', array(
    'path' => 'ajax/calendar/mount/' . $prev . '/' . $pid . '/' . $date_type . '/prev',
    // href ссылки
    'text' => '<i class="fa fa-angle-left" aria-hidden="true"></i>',
    'options' => array(
      'attributes' => array(
        'class' => array(
          'use-ajax',
          'dark_link',
          'prev-month',
          $hidden_class,
        ),
        'id' => 'callback-ajax-callback',

      ),   // атрибуты ссылки
      'html' => TRUE,
    ),
  ));

  $output .= $mount_dates;
  $output .= theme('link', array(
    'path' => 'ajax/calendar/mount/' . $next . '/' . $pid . '/' . $date_type . '/next',
    'text' => '<i class="fa fa-angle-right" aria-hidden="true"></i>',
    'options' => array(

      'attributes' => array(
        'class' => array(
          'use-ajax',
          'dark_link',
          'next-month'
        ),
        'id' => 'callback-ajax-callback'
      ),   // атрибуты ссылки
      'html' => TRUE,


    ),
  ));
  $output .= '</div>';
  $output .= "<table border=1 class='calendar-mini-from'>";
  $output .= '<tr><td>MON</td><td>TUE</td><td>WED</td><td>THU</td><td>FRI</td><td>SAT</td><td>SUN</td></tr>';
  for ($i = 0; $i < count($week); $i++) {
    $output .= "<tr>";
    for ($j = 0; $j < 7; $j++) {

      if (!empty($week[$i][$j])) {


        if ($j == 5 || $j == 6) {

          $output .= "<td class='td_grey'>" . $week[$i][$j];
          $output .= "<div class='hiden'>" . date('M j, Y', mktime(0, 0, 0, $mount, $week[$i][$j], $mount_date_y)) . "</div>";
          $output .= "</td>";


          //          $output .= "<td class='" . $active_day[$week[$i][$j]]. "'>" . $week[$i][$j];

        }
        elseif (($week[$i][$j] < date('j')) && ($mount == date('m'))) {
          $output .= "<td class='td_white'>" . $week[$i][$j] . "</td>";
        }
        elseif (array_key_exists($week[$i][$j], $active_day)) {
          $output .= "<td class='td_pink'>" . $week[$i][$j];


          $output .= "<div class='hiden'>" . date('M j, Y', mktime(0, 0, 0, $mount, $week[$i][$j], $mount_date_y)) . "</div>";
          $output .= "</td>";

        }

        else {
          $green_day_col[$mount][$week[$i][$j]] = [$week[$i][$j]];
          $output .= "<td class='day-" . $week[$i][$j] . " td_light-green'>" . $week[$i][$j];
          $output .= "<div class='hiden'>" . date('M j, Y', mktime(0, 0, 0, $mount, $week[$i][$j], $mount_date_y)) . "</div>";
          $output .= "</td>";
        }
      }
      else {
        $output .= "<td>&nbsp;</td>";
      }
    }
    $output .= "</tr>";
  }
  //  dpm($green_day_col);
  $output .= "</table>";
  $output .= "</div>";
  drupal_add_js(array('heydesk_calendar' => array('greenDay' => $green_day_col)), 'setting');
  return $output;
}

function heydesk_calendar_sum_rental_days_command($month, $direction) {
  return array(
    'command' => 'rentday_count',
    'selector' => $start,
    'month' => $month,
    'direction' => $direction,
  );
}

function _heydesk_calendar_active_days_command($direction, $date) {
  return array(
    'command' => 'active_day_count',
    'direction' => $direction,
    'date' => $date,


  );
}


function _calendar_array($mount, $year) {
  $year = date('Y');
  if ($mount == date('n')) {
    $dayofmonth = date('t');
  }
  else {
    $time = gmmktime(0, 0, 0, $mount, 1, $year); // первое число указанного года-месяца
    $dayofmonth = gmdate("t", $time);
    $year = $mount < 5 ? ++$year : date('Y');
  }
  $day_count = 1;
  $num = 0;
  for ($i = 0; $i < 7; $i++) {
    $dayofweek = date('w', mktime(0, 0, 0, $mount, $day_count, $year));
    $dayofweek = $dayofweek - 1;
    if ($dayofweek == -1) {
      $dayofweek = 6;
    }
    if ($dayofweek == $i) {
      $week[$num][$i] = $day_count;
      $day_count++;
    }
    else {
      $week[$num][$i] = "";
    }
  }
  while (TRUE) {
    $num++;
    for ($i = 0; $i < 7; $i++) {
      $week[$num][$i] = $day_count;
      $day_count++;
      if ($day_count > $dayofmonth) {
        break;
      }
    }
    if ($day_count > $dayofmonth) {
      break;
    }
  }
  return $week;
}

function _mount_linck_calendar($num) {
  $grad = 1 + $num;
  //  $grad = (int) date('n') + $num;
  $grad = $grad > 12 ? $grad - 12 : $grad;

  $linck = '/user/' . arg(1) . '/manage-listing/calendar/' . arg(4) . '/' . $grad;
  return $linck;

}

function calendar_render($coof, $pid) {

  $proposal = db_select('heydesk_calendar', 'hd')
    ->fields('hd', array('id'))
    ->condition('hd.pid', $pid)//    ->condition('hd.date_from', array(
    //      mktime(0, 0, 0, $coof, 1),
    //      mktime(0, 0, 0, $coof, 30)
    //    ), 'BETWEEN')
    ->condition('hd.date_from', mktime(0, 0, 0, $coof, 1), '>')
    ->condition('hd.date_to', mktime(0, 0, 0, $coof, 30), '<')//   ->condition('hd.pid', $pid)
    ->execute()
    ->fetchAll();
  $proposals = array();
  foreach ($proposal as $prop) {
    $proposals[] = heydesk_calendar_load($prop->id);
  };

  $mount = date('n', mktime(0, 0, 0, $coof));
  $mount_date_f = date('n');
  $mount_date_y = date('Y');
  $mount_dates = date('F Y', mktime(0, 0, 0, $coof + 1, 0, $mount_date_y));
  $prev = $coof - 1;
  $next = $coof + 1;
  $week = _calendar_array($coof, date('Y'));
  $output = '<div class="mini_calendar">';

  $output .= '<div class="mounts">';
  $output .= theme('link', array(
    'path' => 'ajax/calendar/mount/' . $prev . '/' . $pid,
    // href ссылки
    'text' => '<i class="fa fa-angle-left" aria-hidden="true"></i>',
    'options' => array(

      'attributes' => array(
        'class' => array('use-ajax', 'dark_link'),
        'id' => 'callback-ajax-callback'
      ),   // атрибуты ссылки
      'html' => TRUE,

    ),
  ));

  $output .= $mount_dates;
  $output .= theme('link', array(
    'path' => 'ajax/calendar/mount/' . $next . '/' . $pid,
    // href ссылки
    'text' => '<i class="fa fa-angle-right" aria-hidden="true"></i>',
    'options' => array(

      'attributes' => array(
        'class' => array('use-ajax', 'dark_link'),
        'id' => 'callback-ajax-callback'
      ),   // атрибуты ссылки
      'html' => TRUE,

    ),
  ));
  $output .= '</div>';
  $output .= "<table border=1 class='calendar-mini-from'>";
  $output .= '<tr><td>MON</td><td>TUE</td><td>WED</td><td>THU</td><td>FRI</td><td>SAT</td><td>SUN</td></tr>';
  for ($i = 0; $i < count($week); $i++) {
    $output .= "<tr>";
    for ($j = 0; $j < 7; $j++) {
      foreach ($proposals as $prday) {
        $week['mount'] = $coof;
        if (date('j', $prday->date_from) == date('j', mktime(0, 0, 0, $coof, $week[$i][$j]))) {
          $this_proposal = $prday;
        }
        $num_class = 'status-' . $prday->status;
        $id_day_prop = $prday->id;
        $week['status'] = $num_class;
      }

      if (!empty($week[$i][$j])) {
        $class = isset($week['status']) ? $week['status'] : '';


        if ($j == 5 || $j == 6) {
          $output .= "<td class='td_grey " . $class . "'>" . $week[$i][$j];
          $output .= "<div class='hiden'>" . date('M j, Y', mktime(0, 0, 0, date('n', $mount_date_f), $week[$i][$j], $mount_date_y)) . "</div>";
          $output .= "</td>";
        }
        //        elseif ($week[$i][$j] < date('j', mktime(0, 0, 0, $coof, $week[$i][$j]))) {
        //          $output .= "<td class='td_white'>" . $week[$i][$j] . "</td>";
        //        }
        else {
          $output .= "<td class='day-" . $week[$i][$j] . " td_light-green " . $class . "'>" . $week[$i][$j];
          $output .= "<div class='hiden'>" . date('M j, Y', mktime(0, 0, 0, $coof, $week[$i][$j], $mount_date_y)) . "</div>";
          $output .= "</td>";
        }
      }
      else {
        $output .= "<td>&nbsp;</td>";
      }
    }
    $output .= "</tr>";
  }

  $output .= "</table>";
  $output .= "</div>";
  return $output;

}

